# vim: syntax=ruby

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#     https://docs.fastlane.tools/actions
# For a list of all available plugins, check out
#     https://docs.fastlane.tools/plugins/available-plugins
# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_version '2.176.0'

default_platform :ios

before_all do |lane|
  case lane
  when :release, :deploy_to_testflight
    ENV['ENV'] = 'production'
  when :beta
    ENV['ENV'] = 'staging'
  else
    ENV['ENV'] = 'development'
  end
end

platform :ios do
  #################
  # Public Lane
  #################

  # desc 'Runs all tests'
  # lane :test do
  #   install_lib
  #   case ENV['ENV']
  #   when 'production'
  #     scan(scheme: 'IdeaMemo-release', device: 'iPhone 12')
  #   when 'staging'
  #     scan(scheme: 'IdeaMemo-staging', device: 'iPhone 12')
  #   when 'development'
  #     scan(scheme: 'IdeaMemo', device: 'iPhone 12')
  #   end
  # end

  desc 'Build for Scheme'
  lane :build do
    # install_lib

    case ENV['ENV']
    when 'production'
      gym_for_scheme(
        scheme: 'IdeaMemo-release',
        configuration: 'Production Release',
        export_method: 'app-store'
      )
    when 'staging'
      gym_for_scheme(
        scheme: 'IdeaMemo-staging',
        configuration: 'Staging Release',
        export_method: 'ad-hoc'
      )
    when 'development'
      gym_for_scheme(
        scheme: 'IdeaMemo',
        configuration: 'Develop Release',
        export_method: 'development'
      )
    end
  end

  desc 'sync xcode signing for CI'
  lane :sync_xcode_signing_for_CI do
    # setup_ci(
    #   force: true,
    #   provider: 'travis' # travis で代用するとうまく動く
    # )

    # create_keychain(
    #   name: ENV['MATCH_KEYCHAIN_NAME'],
    #   password: ENV['MATCH_PASSWORD'],
    #   default_keychain: true,
    #   unlock: true,
    #   timeout: 1800
    # )

    # delivery_type =
    #   case ENV['ENV']
    #   when 'production'
    #     'appstore'
    #   when 'staging'
    #     'adhoc'
    #   else
    #     'development'
    #   end

    # disable_automatic_code_signing(
    #   path: './IdeaMemo.xcodeproj',
    #   team_id: ENV['TEAM_ID']
    # )

    username = ENV['MATCH_GITHUB_USER_NAME']
    personal_github_access_token = ENV['MATCH_GITHUB_TOKEN']
    authorization_token_str = "#{username}:#{personal_github_access_token}"
    basic_authorization_token = Base64.strict_encode64(authorization_token_str)

    match(
      type: "appstore",
      app_identifier: ENV['APP_IDENTIFIER'],
      git_basic_authorization: basic_authorization_token,
      readonly: is_ci
    )

    # case ENV['ENV']
    # when 'production'
    #   match(
    #     type: 'appstore',
    #     readonly: is_ci,
    #     git_basic_authorization: basic_authorization_token,
    #     keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
    #     keychain_password: ENV['MATCH_PASSWORD']
    #   )
    # when 'staging'
    #   match(
    #     type: 'adhoc',
    #     readonly: is_ci,
    #     git_basic_authorization: basic_authorization_token,
    #     keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
    #     keychain_password: ENV['MATCH_PASSWORD']
    #   )
    # else
    #   match(
    #     type: 'development',
    #     readonly: is_ci,
    #     git_basic_authorization: basic_authorization_token,
    #     keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
    #     keychain_password: ENV['MATCH_PASSWORD']
    #   )
    # end

    # update_project_team(
    #   path: './IdeaMemo.xcodeproj',
    #   targets: 'IdeaMemo',
    #   teamid: ENV['TEAM_ID']
    # )

    # sigh_env_path = "sigh_#{ENV['APP_IDENTIFIER']}_appstore_profile-path"
    # build_configuration =
    #   case ENV['ENV']
    #   when 'production'
    #     'Production Release'
    #   when 'staging'
    #     'Staging Release'
    #   else
    #     'Develop Release'
    #   end
    # code_signing_identity =
    #   case ENV['ENV']
    #   when 'production', 'staging'
    #     'Apple Distribution'
    #   else
    #     'Apple Development'
    #   end

    # update_project_provisioning(
    #   xcodeproj: './IdeaMemo.xcodeproj',
    #   target_filter: 'IdeaMemo',
    #   profile: ENV['sigh_com.kino-puehddby.IdeaMemo_appstore_profile-path'],
    #   build_configuration: 'Production Release',
    #   code_sign_identity: code_sign_identity
    # )

    update_code_signing_settings(
      path: './IdeaMemo.xcodeproj',
      use_automatic_signing: false,
      team_id: ENV['TEAM_ID'],
      targets: ['IdeaMemo'],
      build_configurations: 'Production Release',
      code_sign_identity: 'Apple Distribution',
      profile_name: "match AppStore #{ENV['APP_IDENTIFIER']}",
      bundle_identifier: ENV['APP_IDENTIFIER']
    )
  end

  desc 'sync xcode signing'
  lane :sync_xcode_signing do
    configuration_patterns = [
      ['Production Debug', 'Production Release'],
      ['Staging Debug', 'Staging Release'],
      ['Develop Debug', 'Develop Release']
    ]

    configuration_patterns.each do |configurations|
      profile_name =
        case configurations
        when ['Production Debug', 'Production Release']
          "match AppStore #{ENV['APP_IDENTIFIER']}"
        when ['Staging Debug', 'Staging Release']
          "match AdHoc #{ENV['APP_IDENTIFIER']}"
        when ['Develop Debug', 'Develop Release']
          "match Development #{ENV['APP_IDENTIFIER']}"
        end

      code_sign_identity =
        case configurations
        when ['Production Debug', 'Production Release'], ['Staging Debug', 'Staging Release']
          'Apple Distribution'
        when ['Develop Debug', 'Develop Release']
          'Apple Development'
        end

      update_code_signing_settings(
        path: './IdeaMemo.xcodeproj',
        use_automatic_signing: false,
        team_id: ENV['TEAM_ID'],
        targets: ['IdeaMemo'],
        build_configurations: configurations,
        code_sign_identity: code_sign_identity,
        profile_name: profile_name,
        bundle_identifier: ENV['APP_IDENTIFIER']
      )
    end
  end

  desc 'deploy to TestFlight'
  lane :deploy_to_testflight do
    if is_ci
      setup_ci(
        force: true,
        provider: 'travis' # travis で代用するとうまく動くらしい
      )
    end

    if is_ci
      sync_xcode_signing_for_CI
    else
      sync_xcode_signing
    end

    build

    # NOTE: バージョンのアップデートは手動でやる
    # increment_build_and_version_number

    increment_build_number

    if is_ci
      commit_push(message: "build number updated: #{get_build_number}")
    end

    pilot(username: ENV['FASTLANE_USER'])

    refresh_dsyms
  end

  # desc 'deploy to app store connect'
  # lane :release do
  #   build
  #   increment_build_and_version_number
  #   deliver
  # end

  desc 'Download & Upload dSYMs to Firebase Clashlytics'
  lane :refresh_dsyms do |options|
    version = options[:version] || 'latest'

    download_dsyms(
      app_identifier: ENV['APP_IDENTIFIER'],
      username: ENV['FASTLANE_USER'],
      version: version
    )

    upload_symbols_to_crashlytics
    clean_build_artifacts
  end

  #################
  # Private Lane
  #################

  desc 'gym for scheme'
  private_lane :gym_for_scheme do |options|
    # profile_name =
    #   case ENV['ENV']
    #   when 'production'
    #     "match AppStore #{ENV['APP_IDENTIFIER']}"
    #   when 'staging'
    #     "match AdHoc #{ENV['APP_IDENTIFIER']}"
    #   when 'development'
    #     "match Development #{ENV['APP_IDENTIFIER']}"
    #   end

    # codesigning_type =
    #   case configuration
    #   when Production Release', Staging Release'
    #     'Apple Distribution'
    #   when 'Develop Release'
    #     'Apple Development'
    #   end

    export_method = options[:export_method] || 'development'

    build_ios_app(
      scheme: options[:scheme] || 'IdeaMemo',
      configuration: options[:configuration] || 'Develop Release',
      workspace: './IdeaMemo.xcworkspace',
      clean: true,
      export_method: export_method,
      export_options: {
        method: export_method,
        iCloudContainerEnvironment: ENV['ENV'] == 'development' ? 'Development' : 'Production',
        provisioningProfiles: {
          ENV['APP_IDENTIFIER'] => ENV['sigh_com.kino-puehddby.IdeaMemo_adhoc_profile-name']
        }
      },
      export_xcargs: '-allowProvisioningUpdates',
      include_bitcode: ENV['ENV'] != 'development',
      include_symbols: ENV['ENV'] != 'development'
      # codesigning_identity: "#{codesigning_type}: Hisaya Sugita (#{ENV['TEAM_ID']})"
    )
  end

  # desc 'install libraries'
  # private_lane :install_lib do
  #   cocoapods(try_repo_update_on_error: true)
  #   carthage(
  #     command: 'bootstrap',
  #     use_binaries: false,
  #     platform: 'iOS',
  #     cache_builds: true
  #   )
  # end

  desc 'git commit & push'
  private_lane :commit_push do |options|
    git_commit(path: './*', message: options[:message])
    push_to_git_remote
  end

#   desc 'increment build & version number'
#   lane :increment_build_and_version_number do
#     ensure_git_status_clean

#     increment_build_number(build_number: app_store_build_number + 1)
#     bump_type = UI.select('3: ', ['major', 'minor', 'patch'])
#     increment_version_number(bump_type: bump_type)
#     add_git_tag(prefix: 'v', tag: get_version_number)

#     commit_push(message: "build number updated: #{get_build_number} & version number updated: #{get_version_number}")
#   end
end

error do |lane, exception, options|
  error_message = "`#{lane}` hass failed.\nenvironment: `#{ENV['ENV']}`\nerror: #{exception.message}"

  if options[:debug]
    puts error_message
  else
    slack(
      success: false,
      message: error_message,
      icon_url: 'https://fastlane.tools/assets/img/fastlane_icon.png',
      slack_url: ENV['SLACK_WEBHOOK_URL']
    )
  end
end
