# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_version '2.166.0'

default_platform :ios

before_all do |lane|
  if lane == :release
    ENV['ENV'] = 'production'
  elsif lane == :beta
    ENV['ENV'] = 'staging'
  else
    ENV['ENV'] = 'development'
  end

  ensure_git_status_clean
  git_pull
end

platform :ios do
  lane :install_lib do
    cocoapods(try_repo_update_on_error: true)
    carthage(
      command: 'bootstrap',
      use_binaries: false,
      platform: 'iOS',
      cache_builds: true
    )
  end

  desc 'Runs all tests'
  lane :test do
    install_lib

    if ENV['ENV'] == 'production'
      scan(scheme: 'IdeaMemo-release')
    elsif ENV['ENV'] == 'staging'
      scan(scheme: 'IdeaMemo-staging')
    else
      scan(scheme: 'IdeaMemo')
    end
  end

  desc 'Build for Scheme'
  lane :build do |options|
    xcode_workspace_path = './IdeaMemo.xcworkspace'
    output_directory = "./build/ipa/#{ENV['ENV']}/" + Time.new.strftime("%Y/%m/%d/%H%M")
    output_name = 'IdeaMemo.ipa'

    install_lib

    if ENV['ENV'] == 'production'
      gym(
        scheme: 'IdeaMemo-release',
        configuration: 'Production Release',
        workspace: xcode_workspace_path,
        export_method: 'app-store',
        output_directory: output_directory,
        output_name: output_name,
        clean: true,
        include_bitcode: false,
        export_options: {
          uploadBitcode: false,
          uploadSymbols: true,
          compileBitcode: false
        }
      )
    elsif ENV['ENV'] == 'staging'
      gym(
        scheme: 'IdeaMemo-staging',
        configuration: 'Staging Release',
        workspace: xcode_workspace_path,
        export_method: 'ad-hoc',
        output_directory: output_directory,
        output_name: output_name,
        clean: true,
        include_bitcode: false,
        export_options: {
          uploadBitcode: false,
          uploadSymbols: true,
          compileBitcode: false
        }
      )
    else
      gym(
        scheme: 'IdeaMemo',
        configuration: 'Develop Release',
        workspace: xcode_workspace_path,
        export_method: 'development',
        output_directory: output_directory,
        output_name: output_name,
        clean: true,
        include_bitcode: false,
        export_options: {
          uploadBitcode: false,
          uploadSymbols: true,
          compileBitcode: false
        }
      )
    end

    slack(
      success: true,
      message: "IdeaMemoのipaファイルをビルドしました（#{ENV['ENV']}）。",
      slack_url: ENV['SLACK_WEBHOOK_URL']
    )
  end

  desc 'deploy to TestFlight'
  lane :beta do
    build # Build for Scheme
    commit_version_bump(
      message: 'release commit for Test Flight',
      xcodeproj: './IdeaMemo.xcodeproj'
    )
    upload_to_testflight
    push_to_git_remote
  end

  desc 'deploy to app store connect'
  lane :release do |options|
    xcode_proj_path = './IdeaMemo.xcodeproj'

    build # Build for Scheme
    unless options[:no_version_up]
      if options[:version]
        increment_version_number(
          version_number: options[:version],
          xcodeproj: xcode_proj_path
        )
      else
        bump_type = options[:bump_type] || 'minor'
        increment_version_number(
          bump_type: bump_type,
          xcodeproj: xcode_proj_path
        )
      end
      commit_version_bump(message: 'release commit', xcodeproj: xcode_proj_path)
    end
    upload_to_app_store
  end
end

after_all do |lane|
  slack(
    success: true,
    message: "`#{lane}` has suceeded.\nenvironment: `#{ENV['ENV']}`",
    icon_url: 'https://fastlane.tools/assets/img/fastlane_icon.png',
    slack_url: ENV['SLACK_WEBHOOK_URL']
  )
end

error do |lane, exception, options|
  error_message = "`#{lane}` hass failed.\nenvironment: `#{ENV['ENV']}`\nerror: #{exception.message}"

  if options[:debug]
    puts error_message
  else
    slack(
      success: false,
      message: error_message,
      icon_url: 'https://fastlane.tools/assets/img/fastlane_icon.png',
      slack_url: ENV['SLACK_WEBHOOK_URL']
    )
  end
end
