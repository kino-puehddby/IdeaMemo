# This is a basic workflow to help you get started with Actions

name: build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches:
      - master
      - develop
    paths-ignore:
      - README.md
  pull_request:
    branches:
      - develop
    paths-ignore:
      - README.md

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    env:
      DEVELOPER_DIR: /Applications/Xcode_12.3.app/Contents/Developer

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Show Xcode list
        run: ls /Applications | grep 'Xcode'

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Install XcodeGen
        run: brew install xcodegen

      - name: Generate Xcode Project
        run: xcodegen

      - name: Install rbenv
        run: brew install rbenv ruby-build

      - name: Cache RBENV_ROOT
        uses: actions/cache@v1
        id: cache_rbenv
        with:
          path: /home/runner/.rbenv
          key: ${{ runner.os }}-rbenv-${{ hashFiles('**/.ruby-version') }}
          restore-keys: |
            {{ runner.os }}-rbenv-

      - name: Set Environment for Ruby Cache
        run: |
          export RBENV_RUBY_VERSION_HOME="$(rbenv root)/versions/`cat .ruby-version`"

      - name: Cache Ruby
        uses: actions/cache@v2
        with:
          path: $RBENV_RUBY_VERSION_HOME
          key: ${{ runner.os }}-ruby-${{ hashFiles('**/.ruby-version') }}
          restore-keys: |
            ${{ runner.os }}-ruby-

      - name: Install Ruby
        run: |
          rubyVersionBinaryPath="$(rbenv root)""/versions/""$(< .ruby-version)""/bin/ruby"
          if [ -e "$rubyVersionBinaryPath" ]; then
            :
          else
            eval "$(rbenv init -)"
            rbenv install -s `cat .ruby-version`
            rbenv global `cat .ruby-version`
            rbenv rehash
            echo "-------- rbenv versions -------"
            rbenv versions
            echo "-------- cat ~/.bash_profile -------"
            echo 'export PATH=~/.rbenv/bin:$PATH' >> ~/.bash_profile
            echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
            echo 'export PATH=~/.rbenv/shims:/usr/local/bin:$PATH' >> ~/.bash_profile
            cat ~/.bash_profile
            source ~/.bash_profile
            echo "-------- which ruby -------"
            which ruby
            echo "-------- ruby -v -------"
            ruby -v
            echo "-------- echo PATH -------"
            echo $PATH
          fi

      - name: Cache Gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Bundler
        run: |
          rbenv exec gem install bundler
          rbenv rehash
          echo "-------- rbenv versions -------"
          rbenv versions

      - name: Install Bundled Gems
        run: |
          eval "$(rbenv init -)"
          rbenv global `cat .ruby-version`
          rbenv rehash
          echo "-------- rbenv versions -------"
          rbenv versions
          echo "-------- which ruby -------"
          which ruby
          echo "-------- ruby -v -------"
          ruby -v
          echo "-------- bundle env -------"
          bundle env
          echo "-------- rbenv exec bundle env -------"
          rbenv exec bundle env
          echo "-------- bundle install -------"
          rbenv exec bundle config path vendor/bundle
          rbenv exec bundle install --jobs 4 --retry 3

      - name: Cache Pods
        uses: actions/cache@v2
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Pods
        run: |
          eval "$(rbenv init -)"
          rbenv global `cat .ruby-version`
          rbenv rehash
          echo "-------- rbenv versions -------"
          rbenv versions
          echo "-------- which ruby -------"
          which ruby
          echo "-------- ruby -v -------"
          ruby -v
          echo "-------- bundle env -------"
          bundle env
          echo "-------- rbenv exec bundle env -------"
          rbenv exec bundle env
          echo "-------- pod install -------"
          rbenv exec bundle exec pod install

      - name: Cache Carthage packages
        uses: actions/cache@v2
        with:
          path: Carthage
          key: ${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}
          restore-keys: |
            ${{ runner.os }}-carthage-

      - name: Install Carthage frameworks
        run: |
          bash run-carthage.sh bootstrap --platform iOS --no-use-binaries --cache-builds
          echo '*** Resolved dependencies:'
          cat 'Cartfile.resolved'
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Xcode build
        run: set -o pipefail &&
          xcodebuild
          -sdk iphonesimulator
          -configuration Debug
          -workspace IdeaMemo.xcworkspace
          -scheme IdeaMemo
          build
          | bundle exec xcpretty
